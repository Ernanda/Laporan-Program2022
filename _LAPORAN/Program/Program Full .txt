#include <LCD_I2C.h>
#define TdsSensorPin A2
#define VREF 5.0
#define SCOUNT 30

#include <OneWire.h>
#include <DallasTemperature.h>
#define SENSOR_PIN 13
#define RL 47
#define m -0.263
#define b 0.42
#define Ro 20
#define MQ_sensor A0

LCD_I2C lcd(0x27, 16, 2);
OneWire oneWire(SENSOR_PIN);
DallasTemperature DS18B20(&oneWire);

int analogBuffer[SCOUNT];
int analogBufferTemp[SCOUNT];
int analogBufferIndex = 0;
int copyIndex = 0;

float averageVoltage = 0;
float tdsValue = 0;
float temperature = 25;

float tempC;

int Turbidity_Sensor_Pin = A3;
float Turbidity_Sensor_Voltage;
int samples = 1000;
float ntu;

float calibration_value = 21.34 + 2.7;
int phval = 0;
unsigned long int avgval;
int buffer_arr[10], temp;

// A0  Ammonia
// A1  pH
// A2  TDS
// A3  Turbidity
// D13 DS18B20

int getMedianNum(int bArray[], int iFilterLen)
{
  int bTab[iFilterLen];
  for (byte i = 0; i < iFilterLen; i++)
    bTab[i] = bArray[i];
  int i, j, bTemp;
  for (j = 0; j < iFilterLen - 1; j++)
  {
    for (i = 0; i < iFilterLen - j - 1; i++)
    {
      if (bTab[i] > bTab[i + 1])
      {
        bTemp = bTab[i];
        bTab[i] = bTab[i + 1];
        bTab[i + 1] = bTemp;
      }
    }
  }
  if ((iFilterLen & 1) > 0)
  {
    bTemp = bTab[(iFilterLen - 1) / 2];
  }
  else
  {
    bTemp = (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
  }
  return bTemp;
}

float pH()
{
  for (int i = 0; i < 10; i++)
  {
    buffer_arr[i] = analogRead(A1);
    delay(30);
  }
  for (int i = 0; i < 9; i++)
  {
    for (int j = i + 1; j < 10; j++)
    {
      if (buffer_arr[i] > buffer_arr[j])
      {
        temp = buffer_arr[i];
        buffer_arr[i] = buffer_arr[j];
        buffer_arr[j] = temp;
      }
    }
  }
  avgval = 0;
  for (int i = 2; i < 8; i++)
    avgval += buffer_arr[i];
  float volt = (float)avgval * 5.0 / 1024 / 6;
  float ph_act = -5.70 * volt + calibration_value;

  return ph_act;
}

void setup()
{
  Serial.begin(9600);
  DS18B20.begin();
  pinMode(Turbidity_Sensor_Pin, INPUT);
  lcd.begin();
  lcd.backlight();

  Serial.println("Initializing ...");
  delay(2000);
}

void loop()
{
  // TDS Sensor
  static unsigned long analogSampleTimepoint = millis();
  if (millis() - analogSampleTimepoint > 40U)
  {
    analogSampleTimepoint = millis();
    analogBuffer[analogBufferIndex] = analogRead(TdsSensorPin);
    analogBufferIndex++;
    if (analogBufferIndex == SCOUNT)
    {
      analogBufferIndex = 0;
    }
  }

  static unsigned long printTimepoint = millis();
  if (millis() - printTimepoint > 800U)
  {
    printTimepoint = millis();
    for (copyIndex = 0; copyIndex < SCOUNT; copyIndex++)
    {
      analogBufferTemp[copyIndex] = analogBuffer[copyIndex];

      averageVoltage = getMedianNum(analogBufferTemp, SCOUNT) * (float)VREF / 4096.0;

      float compensationCoefficient = 1.0 + 0.02 * (temperature - 25.0);
      float compensationVoltage = averageVoltage / compensationCoefficient;

      // convert voltage value to tds value
      tdsValue = (133.42 * compensationVoltage * compensationVoltage * compensationVoltage - 255.86 * compensationVoltage * compensationVoltage + 857.39 * compensationVoltage) * 0.5;

      // TDS A2
      Serial.print("TDS Value:");
      Serial.print(tdsValue, 0);
      Serial.println("ppm");

      // pH A1
      Serial.print("Nilai pH : ");
      Serial.println(pH());

      // Ammonia A0
      float VRL;
      float Rs;
      float ratio;

      VRL = analogRead(MQ_sensor) * (5.0 / 1023.0);
      Rs = ((5.0 * RL) / VRL) - RL;
      ratio = Rs / Ro;
      float amo = pow(10, ((log10(ratio) - b) / m));

      // Turbidity Sensor A3
      Turbidity_Sensor_Voltage = 0;
      for (int i = 0; i < samples; i++)
      {
        Turbidity_Sensor_Voltage += ((float)analogRead(Turbidity_Sensor_Pin) / 1023) * 5;
      }

      Turbidity_Sensor_Voltage = Turbidity_Sensor_Voltage / samples;

      Turbidity_Sensor_Voltage = round_to_dp(Turbidity_Sensor_Voltage, 2);
      if (Turbidity_Sensor_Voltage < 2.5)
      {
        ntu = 3000;
      }
      else
      {
        ntu = -1120.4 * square(Turbidity_Sensor_Voltage) + 5742.3 * Turbidity_Sensor_Voltage - 4352.9;
      }

      Serial.println(ntu);

      // DS18B20 Temperature
      DS18B20.requestTemperatures();
      tempC = DS18B20.getTempCByIndex(0);

      //RBR PH
      float pHval = pH();
      if (pHval > 8.5) {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("pH = ");
        lcd.setCursor(6, 1);
        lcd.print(pHval);
        lcd.setCursor(1, 2);
        lcd.print("Terlalu Tinggi");

        delay(5000);

        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Menggunakan RO /");
        lcd.setCursor(1, 2);
        lcd.print("DI");
      } else if (pHval < 5) {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("pH = ");
        lcd.setCursor(6, 1);
        lcd.print(pHval);
        lcd.setCursor(1, 2);
        lcd.print("Terlalu Rendah");

        delay(5000);

        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Menggunakan pH");
        lcd.setCursor(1, 2);
        lcd.print("Buffer");
      } else {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("pH = ");
        lcd.setCursor(6, 1);
        lcd.print(pHval);
        lcd.setCursor(1, 2);
        lcd.print("Kadar pH Normal");
      }

      delay(5000);

      //RBR Ammonia
      if (amo > 0.02) {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Amon = ");
        lcd.setCursor(8, 1);
        lcd.print(amo);
        lcd.setCursor(1, 2);
        lcd.print("Terlalu Tinggi");

        delay(5000);

        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Ganti 25% air /");
        lcd.setCursor(1, 2);
        lcd.print("Ammonia Remover");
      } else {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Amon = ");
        lcd.setCursor(8, 1);
        lcd.print(amo);
        lcd.setCursor(1, 2);
        lcd.print("Kadar Amo Normal");
      }

      delay(5000);

      //RBR Suhu
      if (tempC > 32) {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Suhu = ");
        lcd.setCursor(8, 1);
        lcd.print(tempC);
        lcd.setCursor(1, 2);
        lcd.print("Suhu Air Tnggi");

        delay(5000);

        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Tmbah Air Dingin");
        lcd.setCursor(1, 2);
        lcd.print("/ es batu");
      } else if (tempC < 25) {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Suhu = ");
        lcd.setCursor(8, 1);
        lcd.print(tempC);
        lcd.setCursor(1, 2);
        lcd.print("Suhu Air Rendah");

        delay(5000);

        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Tmbah Air Hangat");
        lcd.setCursor(1, 2);
        lcd.print("penghangat air");
      } else {
        lcd.clear();
        lcd.setCursor(1, 1);
        lcd.print("Suhu = ");
        lcd.setCursor(8, 1);
        lcd.print(tempC);
        lcd.setCursor(1, 2);
        lcd.print("Suhu Air Normal");
      }

      delay(5000);

      //RBR TDS
      if (tdsValue > 1000) {
        //Solusi Atas
        else {
          //Baik
        }

        delay(5000);

        //kekeruhan
        if (ntu > 400) {
          lcd.clear();
          lcd.setCursor(1, 1);
          lcd.print("Keruh = ");
          lcd.setCursor(9, 1);
          lcd.print(ntu);
          lcd.setCursor(1, 2);
          lcd.print("Air Keruh");

          delay(5000);

          lcd.clear();
          lcd.setCursor(1, 1);
          lcd.print("Tambah Kincir dan");
          lcd.setCursor(1, 2);
          lcd.print("filter air");
        } else {
          lcd.clear();
          lcd.setCursor(1, 1);
          lcd.print("Keruh = ");
          lcd.setCursor(9, 1);
          lcd.print(tempC);
          lcd.setCursor(1, 2);
          lcd.print("Air Tidak Keruh");
        }
      }
    }

    delay(1000); // delay of 1sec
  }

  float round_to_dp(float in_value, int decimal_place)
  {
    float multiplier = powf(10.0f, decimal_place);
    in_value = roundf(in_value * multiplier) / multiplier;
    return in_value;
  }